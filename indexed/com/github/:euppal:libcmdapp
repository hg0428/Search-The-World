title:GitHub - euppal/libcmdapp– A customizable cross-platform command option and argument parsing library written in C;addr:github.com
GitHub - euppal/libcmdapp: A customizable cross-platform command option and argument parsing library written in C    Skip to content              Sign up  Sign up                 Why GitHub?      Features →   Mobile →  Actions →  Codespaces →  Packages →  Security →  Code review →  Project management →  Integrations →    GitHub Sponsors →  Customer stories →       Team    Enterprise     Explore       Explore GitHub →   Learn and contribute   Topics →  Collections →  Trending →  Learning Lab →  Open source guides →   Connect with others   The ReadME Project →  Events →  Community forum →  GitHub Education →  GitHub Stars program →       Marketplace     Pricing      Plans →   Compare plans →  Contact Sales →    Education →            '"` &lt;/textarea&lt;&lt;/xmp&lt;                    In this repository  All GitHub  ↵   Jump to ↵        No suggested jump to results                In this repository  All GitHub  ↵   Jump to ↵                In this user  All GitHub  ↵   Jump to ↵                In this repository  All GitHub  ↵   Jump to ↵            Sign in  Sign up  Sign up               {{ message }}                euppal   /   libcmdapp        Notifications      Star  0     Fork  0      A customizable cross-platform command option and argument parsing library written in C    LGPL-3.0 License      0 stars    0 forks       Star     Notifications          Code       Issues  0      Pull requests  0      Actions       Projects  0      Security       Insights          More        Code    Issues    Pull requests    Actions    Projects    Security    Insights                    main       Switch branches/tags          Branches  Tags      Nothing to show   TODO: this max-height is necessary or else the branch list won't scroll.  why?             {{ refName }}  default    View all branches       Nothing to show      {{ refName }}  default            View all tags             1  branch     0  tags     Go to file      Code           Clone     HTTPS  GitHub CLI           Use Git or checkout with SVN using the web URL.          Work fast with our official CLI. Learn more .        Open with GitHub Desktop     Download ZIP      Launching GitHub Desktop  If nothing happens, download GitHub Desktop and try again.  Go back    Launching GitHub Desktop  If nothing happens, download GitHub Desktop and try again.  Go back    Launching Xcode  If nothing happens, download Xcode and try again.  Go back    Launching Visual Studio  If nothing happens, download the GitHub extension for Visual Studio and try again.  Go back           Latest commit         Git stats       25  commits         Files   Permalink   Failed to load latest commit information.     Type  Name  Latest commit message  Commit time        src                 .DS_Store                 .gitattributes                 .gitignore                 LICENSE                 Makefile                 README.md                 main.c              View code                 libcmdapp  Features  Building  Usage  Documentation       README.md      libcmdapp  A customizable command option and argument parsing library written in C.  Features  1. Short and long options  Standard short options with a dash and a character are supported alongside long options with 2 dashes. 2 dashes by themselves, however, indicate that every subsequent value is an argument.  2. Customizable option parsing behavior  Short options are given arguments by a space after the option, and long options are given arguments through an equals sign after the option. However, that does not specify what do to when something like -abc is encountered. CMDAPP_MODE_MULTIFLAG and CMDAPP_MODE_SHORTARG exist to resolve this.     mode  behavior      CMDAPP_MODE_MULTIFLAG  -abc -&lt; -a -b -c    CMDAPP_MODE_SHORTARG  -abc -&lt; -a bc     3. Error handling and diagnostics  cmdapp_run notifies the caller of an error through its return value, and if not silenced with CMDAPP_MODE_SILENT will print diagnostic error messages to stderr .  4. Automatic --help and --version  If you do not set these as options, libcmdarg will use various information to automatically generate responses in such a way that help2man will work.  5. Proceeding AND procedural parsing  Not only does cmdapp_run terminate with all options and arguments in the proper state, it also calls optional functions as it parses . This allows for repeated options and usage of args sensitive to positioning of options.  If you have a interface like -Dfoo file1 -Dbar file1 which will analyze file1 twice with different definitions, using normal parsing will give you -D=bar and args= file1, file1 . However, with procedural parsing you will get: -D=foo , file1 , -D=bar , file1 . It's also important to note that the cmdopt_t s on the user side will be set as well, so you can refer to as many of them as you want when you come across an arg. This is useful if you have -a -b file1 -a file1 and you want the first analysis of file1 to be in both modes a and b .  Building  First, clone the repo and move in it  git clone https://github.com/euppal/libcmdapp cd libcmdapp  To build libcmdapp, use  make  This will build the static and dynamic libraries, along with a test program (called demo).   you can build the static library using make static and the dynamic one with make dynamic   Usage  You can initialize an app object with:  cmdapp_t app; const  cmdapp_info_t info = { ... }; cmdapp_init (&app, argc, argv, CMDAPP_MODE, &info);  It's important to note here that argv must be of type char** . The penultimate argument CMDAPP_MODE is a combination of modes (using | ). Modes provided will be define as macros prefixed with CMDAPP_MODE that resolve to integer constant expressions. The last argument contains necessary metadata for automatic --help and --version generation.  You then use cmdapp_set for each of your options. Here is an example setup for a hypothetical interpreter.  enum Options {    Eval, File, OPTION_COUNT}; cmdopt_t options[OPTION_COUNT]; cmdapp_set (&app, ' e ' , " eval " , CMDOPT_TAKESARG, " Evaluates a script " , &options[Eval]); cmdapp_set (&app, ' f ' , " file " , CMDOPT_TAKESARG, " Interprets a file " , &options[File]);  After this, you can simply call cmdapp_run(&app) . If it returns EXIT_SUCCESS , then you can look at the properties of your options.  To see if your option was passed, use cmdopt_exists . To get the arg it was passed, use the value member. Don't rely on any other members.  To get a list of ordinary arguments, use cmdapp_getargs(&app) and check if it is NULL before using the members length and contents :  typedef  struct { size_t length; const  char ** contents;} cmdargs_t ;  Once done, use cmdapp_destroy(&app) . Any subsequent member access is undefined. This also destroys the list of ordinary arguments, so copy it before you call this destructor.  Documentation  This may come soon, but the header file app.h is heavily commented.           About  A customizable cross-platform command option and argument parsing library written in C  Resources    Readme   License    LGPL-3.0 License        Releases  No releases published       Packages 0   No packages published              Contributors 2                     Languages           C  97.4%       Makefile  2.6%                  © 2021 GitHub, Inc.  Terms  Privacy  Security  Status  Docs       Contact GitHub  Pricing  API  Training  Blog  About            You can’t perform that action at this time.    You signed in with another tab or window. Reload to refresh your session.  You signed out in another tab or window. Reload to refresh your session.                 
https://github.githubassets.com/favicons/favicon.png